---
layout:     post
title:      "A D3 Problem and Solution"
subtitle:   "Making SVG images spin"
date:       2015-06-11 05:10:00
author:     "Kevin Chiang"
header-img: "img/dots.png"
---

<p>My first post ever! The past couple of days, I've been working on creating a game using D3 for the first time. The game that my partner and I were trying to create is much like Collider, if you've ever heard of it. Prior to being exposed to D3, I had only tried using jQuery to manipulate DOM objects. Going through this project really helped me see some of the versatility and power that D3 provides. </p>

<p>Let's jump into the problem! In our project, we had to make SVG images which we set to look like asteroids. First, we created the SVG using D3: </p>

<pre><code>
var svg = d3.select('body').append('svg')</a>.attr("width", 1000).attr("height", 625).style("border", "1px solid white");
</code></pre>

<p>Next, we needed a way to generate 10 SVG images that started in random positions on our SVG element. We used a function to do this:</p>

<pre><code>
var numEnemies = 10;

var createEnemies = function(){
  return d3.range(0, numEnemies).map(function(i){ 
    return {id: i, x: Math.random() * 950, y: Math.random() * 650};
  });
}

var enemies = createEnemies();
</code></pre>

<p>Finally, we used the function we created to append to the SVG element along with the attributes we wanted for our SVG images
</p>

<pre><code>
svg.selectAll("image.enemy")
.data(enemies, function(d){ return d.id; )
.enter().append("image")
.attr("xlink:href", "asteroid.png").attr("height", "50")
.attr("width","50").attr("class", "enemy")
.attr("x", function(d){ return d.x; }).attr("y", function(d){ return d.y; });
</code></pre>

<p>Next, we wanted the asteroids to be able to spin in place using CSS. After several Google searches, we could only find tutorials on using CSS webkits that would make our SVG images rotate. We decided to give it a try anyways using the rotate webkit keyframes and accessing all of our SVG images using the "enemy" class property that we set it to earlier.</p>

<pre><code>
@-webkit-keyframes rotate {
  from {
    -webkit-transform: rotate(0deg);
  }
  to { 
    -webkit-transform: rotate(360deg);
  }
}

 .enemy{
  -webkit-transform: rotate(360deg);
  -webkit-animation-name:rotate;
  -webkit-animation-duration: 0.5s;
  -webkit-animation-iteration-count: infinite;
  -webkit-animation-timing-function: linear;
}
</code></pre>

<p>This was rotating all of our images instead of spinning them, as we suspected it would. Our solution was to add the transform origin property, which allows you to change the position of transformed elements.
</p>

<pre><code>
-webkit-transform-origin: 50% 50%;
</code></pre>

<p>Thanks for reading!</p>